syntax = "proto3";

package feast.serving;

import "google/protobuf/timestamp.proto";
import "feast/types/Value.proto";

option go_package = "github.com/caraml-dev/caraml-store/caraml-store-sdk/go/protos/feast/serving";
option java_package = "dev.caraml.store.protobuf.serving";
option java_outer_classname = "ServingServiceProto";

service ServingService {
    // Get information about this Feast serving.
    rpc GetFeastServingInfo (GetFeastServingInfoRequest) returns (GetFeastServingInfoResponse);

  // Get online features. To be deprecated in favor of GetOnlineFeatures.
  rpc GetOnlineFeaturesV2 (GetOnlineFeaturesRequest) returns (GetOnlineFeaturesResponseV2);

  // Get online features using optimized response message.
  rpc GetOnlineFeatures (GetOnlineFeaturesRequest) returns (GetOnlineFeaturesResponse);
}

message GetFeastServingInfoRequest {}

message GetFeastServingInfoResponse {
    // Feast version of this serving deployment.
    string version = 1;
}

message FeatureReference {
    // Name of the Feature Table to retrieve the feature from.
    string feature_table = 1;

    // Name of the Feature to retrieve the feature from.
    string name = 2;
}

message GetOnlineFeaturesRequest {
    // List of features that are being retrieved
    repeated FeatureReference features = 4;

    // List of entity rows, containing entity id and timestamp data.
    // Used during retrieval of feature rows and for joining feature
    // rows into a final dataset
    repeated EntityRow entity_rows = 2;

    // Optional field to specify project name override. If specified, uses the
    // given project for retrieval. Overrides the projects specified in
    // Feature References if both are specified.
    string project = 5;

    message EntityRow {
        // Request timestamp of this row. This value will be used,
        // together with maxAge, to determine feature staleness.
        google.protobuf.Timestamp timestamp = 1;

        // Map containing mapping of entity name to entity value.
        map<string,feast.types.Value> fields = 2;
    }
}

message GetOnlineFeaturesResponseV2 {
    // Feature values retrieved from feast.
    repeated FieldValues field_values = 1;

    message FieldValues {
        // Map of feature or entity name to feature/entity values.
        // Timestamps are not returned in this response.
        map<string, feast.types.Value> fields = 1;
        // Map of feature or entity name to feature/entity statuses/metadata.
        map<string, FieldStatus> statuses = 2;
    }
}

message GetOnlineFeaturesResponse {
    GetOnlineFeaturesResponseMetadata metadata = 1;

    // Length of "results" array should match length of requested features and entities.
    // We also preserve the same order of features here as in metadata.field_names
    repeated FieldVector results = 2;

    message FieldVector {
        repeated feast.types.Value values = 1;
        repeated FieldStatus statuses = 2;
    }
}

message GetOnlineFeaturesResponseMetadata {
    FieldList field_names = 1;
}

message FieldList {
    repeated string val = 1;
}

enum FieldStatus {
    // Status is unset for this field.
    INVALID = 0;

    // Field value is present for this field and age is within max age.
    PRESENT = 1;

    // Values could be found for entity key and age is within max age, but
    // this field value is assigned a value on ingestion into feast.
    NULL_VALUE = 2;

    // Entity key did not return any values as they do not exist in Feast.
    // This could suggest that the feature values have not yet been ingested
    // into feast or the ingestion failed.
    NOT_FOUND = 3;

    // Values could be found for entity key, but field values are outside the maximum
    // allowable range.
    OUTSIDE_MAX_AGE = 4;

    // Values could be found for entity key, but are null and is due to ingestion failures
    INGESTION_FAILURE = 5;
}
