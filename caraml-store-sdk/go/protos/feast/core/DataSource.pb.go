// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: feast/core/DataSource.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of Data Source.
type DataSource_SourceType int32

const (
	DataSource_INVALID          DataSource_SourceType = 0
	DataSource_BATCH_FILE       DataSource_SourceType = 1
	DataSource_BATCH_BIGQUERY   DataSource_SourceType = 2
	DataSource_STREAM_KAFKA     DataSource_SourceType = 3
	DataSource_BATCH_MAXCOMPUTE DataSource_SourceType = 4
)

// Enum value maps for DataSource_SourceType.
var (
	DataSource_SourceType_name = map[int32]string{
		0: "INVALID",
		1: "BATCH_FILE",
		2: "BATCH_BIGQUERY",
		3: "STREAM_KAFKA",
		4: "BATCH_MAXCOMPUTE",
	}
	DataSource_SourceType_value = map[string]int32{
		"INVALID":          0,
		"BATCH_FILE":       1,
		"BATCH_BIGQUERY":   2,
		"STREAM_KAFKA":     3,
		"BATCH_MAXCOMPUTE": 4,
	}
)

func (x DataSource_SourceType) Enum() *DataSource_SourceType {
	p := new(DataSource_SourceType)
	*p = x
	return p
}

func (x DataSource_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_feast_core_DataSource_proto_enumTypes[0].Descriptor()
}

func (DataSource_SourceType) Type() protoreflect.EnumType {
	return &file_feast_core_DataSource_proto_enumTypes[0]
}

func (x DataSource_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource_SourceType.Descriptor instead.
func (DataSource_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 0}
}

// Defines a Data Source that can be used source Feature data
type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DataSource_SourceType `protobuf:"varint,1,opt,name=type,proto3,enum=feast.core.DataSource_SourceType" json:"type,omitempty"`
	// Defines mapping between fields in the sourced data
	// and fields in parent FeatureTable.
	FieldMapping map[string]string `protobuf:"bytes,2,rep,name=field_mapping,json=fieldMapping,proto3" json:"field_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Must specify event timestamp column name
	EventTimestampColumn string `protobuf:"bytes,3,opt,name=event_timestamp_column,json=eventTimestampColumn,proto3" json:"event_timestamp_column,omitempty"`
	// (Optional) Specify partition column
	// useful for file sources
	DatePartitionColumn string `protobuf:"bytes,4,opt,name=date_partition_column,json=datePartitionColumn,proto3" json:"date_partition_column,omitempty"`
	// Must specify creation timestamp column name
	CreatedTimestampColumn string `protobuf:"bytes,5,opt,name=created_timestamp_column,json=createdTimestampColumn,proto3" json:"created_timestamp_column,omitempty"`
	// DataSource options.
	//
	// Types that are assignable to Options:
	//
	//	*DataSource_FileOptions_
	//	*DataSource_BigqueryOptions
	//	*DataSource_KafkaOptions_
	//	*DataSource_MaxcomputeOptions
	Options isDataSource_Options `protobuf_oneof:"options"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0}
}

func (x *DataSource) GetType() DataSource_SourceType {
	if x != nil {
		return x.Type
	}
	return DataSource_INVALID
}

func (x *DataSource) GetFieldMapping() map[string]string {
	if x != nil {
		return x.FieldMapping
	}
	return nil
}

func (x *DataSource) GetEventTimestampColumn() string {
	if x != nil {
		return x.EventTimestampColumn
	}
	return ""
}

func (x *DataSource) GetDatePartitionColumn() string {
	if x != nil {
		return x.DatePartitionColumn
	}
	return ""
}

func (x *DataSource) GetCreatedTimestampColumn() string {
	if x != nil {
		return x.CreatedTimestampColumn
	}
	return ""
}

func (m *DataSource) GetOptions() isDataSource_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *DataSource) GetFileOptions() *DataSource_FileOptions {
	if x, ok := x.GetOptions().(*DataSource_FileOptions_); ok {
		return x.FileOptions
	}
	return nil
}

func (x *DataSource) GetBigqueryOptions() *DataSource_BigQueryOptions {
	if x, ok := x.GetOptions().(*DataSource_BigqueryOptions); ok {
		return x.BigqueryOptions
	}
	return nil
}

func (x *DataSource) GetKafkaOptions() *DataSource_KafkaOptions {
	if x, ok := x.GetOptions().(*DataSource_KafkaOptions_); ok {
		return x.KafkaOptions
	}
	return nil
}

func (x *DataSource) GetMaxcomputeOptions() *DataSource_MaxComputeOptions {
	if x, ok := x.GetOptions().(*DataSource_MaxcomputeOptions); ok {
		return x.MaxcomputeOptions
	}
	return nil
}

type isDataSource_Options interface {
	isDataSource_Options()
}

type DataSource_FileOptions_ struct {
	FileOptions *DataSource_FileOptions `protobuf:"bytes,11,opt,name=file_options,json=fileOptions,proto3,oneof"`
}

type DataSource_BigqueryOptions struct {
	BigqueryOptions *DataSource_BigQueryOptions `protobuf:"bytes,12,opt,name=bigquery_options,json=bigqueryOptions,proto3,oneof"`
}

type DataSource_KafkaOptions_ struct {
	KafkaOptions *DataSource_KafkaOptions `protobuf:"bytes,13,opt,name=kafka_options,json=kafkaOptions,proto3,oneof"`
}

type DataSource_MaxcomputeOptions struct {
	MaxcomputeOptions *DataSource_MaxComputeOptions `protobuf:"bytes,14,opt,name=maxcompute_options,json=maxcomputeOptions,proto3,oneof"`
}

func (*DataSource_FileOptions_) isDataSource_Options() {}

func (*DataSource_BigqueryOptions) isDataSource_Options() {}

func (*DataSource_KafkaOptions_) isDataSource_Options() {}

func (*DataSource_MaxcomputeOptions) isDataSource_Options() {}

// Defines options for DataSource that sources features from a file
type DataSource_FileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat *FileFormat `protobuf:"bytes,1,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// Target URL of file to retrieve and source features from.
	// s3://path/to/file for AWS S3 storage
	// gs://path/to/file for GCP GCS storage
	// file:///path/to/file for local storage
	FileUrl string `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	// Allow users to override some configuration for the ingestion jobs.
	SparkOverride *SparkOverride `protobuf:"bytes,3,opt,name=spark_override,json=sparkOverride,proto3" json:"spark_override,omitempty"`
}

func (x *DataSource_FileOptions) Reset() {
	*x = DataSource_FileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_FileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_FileOptions) ProtoMessage() {}

func (x *DataSource_FileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_FileOptions.ProtoReflect.Descriptor instead.
func (*DataSource_FileOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DataSource_FileOptions) GetFileFormat() *FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *DataSource_FileOptions) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *DataSource_FileOptions) GetSparkOverride() *SparkOverride {
	if x != nil {
		return x.SparkOverride
	}
	return nil
}

// Defines options for DataSource that sources features from a BigQuery Query
type DataSource_BigQueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full table reference in the form of [project:dataset.table]
	TableRef string `protobuf:"bytes,1,opt,name=table_ref,json=tableRef,proto3" json:"table_ref,omitempty"`
	// Allow users to override some configuration for the ingestion jobs.
	SparkOverride *SparkOverride `protobuf:"bytes,2,opt,name=spark_override,json=sparkOverride,proto3" json:"spark_override,omitempty"`
}

func (x *DataSource_BigQueryOptions) Reset() {
	*x = DataSource_BigQueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_BigQueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_BigQueryOptions) ProtoMessage() {}

func (x *DataSource_BigQueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_BigQueryOptions.ProtoReflect.Descriptor instead.
func (*DataSource_BigQueryOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DataSource_BigQueryOptions) GetTableRef() string {
	if x != nil {
		return x.TableRef
	}
	return ""
}

func (x *DataSource_BigQueryOptions) GetSparkOverride() *SparkOverride {
	if x != nil {
		return x.SparkOverride
	}
	return nil
}

// Defines options for DataSource that sources features from a MaxCompute Query
type DataSource_MaxComputeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableRef string `protobuf:"bytes,1,opt,name=table_ref,json=tableRef,proto3" json:"table_ref,omitempty"`
}

func (x *DataSource_MaxComputeOptions) Reset() {
	*x = DataSource_MaxComputeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_MaxComputeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_MaxComputeOptions) ProtoMessage() {}

func (x *DataSource_MaxComputeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_MaxComputeOptions.ProtoReflect.Descriptor instead.
func (*DataSource_MaxComputeOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 3}
}

func (x *DataSource_MaxComputeOptions) GetTableRef() string {
	if x != nil {
		return x.TableRef
	}
	return ""
}

// Defines options for DataSource that sources features from Kafka messages.
// Each message should be a Protobuf that can be decoded with the generated
// Java Protobuf class at the given class path
type DataSource_KafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comma separated list of Kafka bootstrap servers. Used for feature tables without a defined source host[:port]]
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// Kafka topic to collect feature data from.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Defines the stream data format encoding feature/entity data in Kafka messages.
	MessageFormat *StreamFormat `protobuf:"bytes,3,opt,name=message_format,json=messageFormat,proto3" json:"message_format,omitempty"`
	// Allow users to override some configuration for the ingestion jobs.
	SparkOverride *SparkOverride `protobuf:"bytes,4,opt,name=spark_override,json=sparkOverride,proto3" json:"spark_override,omitempty"`
}

func (x *DataSource_KafkaOptions) Reset() {
	*x = DataSource_KafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feast_core_DataSource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource_KafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource_KafkaOptions) ProtoMessage() {}

func (x *DataSource_KafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_feast_core_DataSource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource_KafkaOptions.ProtoReflect.Descriptor instead.
func (*DataSource_KafkaOptions) Descriptor() ([]byte, []int) {
	return file_feast_core_DataSource_proto_rawDescGZIP(), []int{0, 4}
}

func (x *DataSource_KafkaOptions) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *DataSource_KafkaOptions) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *DataSource_KafkaOptions) GetMessageFormat() *StreamFormat {
	if x != nil {
		return x.MessageFormat
	}
	return nil
}

func (x *DataSource_KafkaOptions) GetSparkOverride() *SparkOverride {
	if x != nil {
		return x.SparkOverride
	}
	return nil
}

var File_feast_core_DataSource_proto protoreflect.FileDescriptor

var file_feast_core_DataSource_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1b, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x0a, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x47, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a,
	0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa3, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x70, 0x61, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x70, 0x0a, 0x0f, 0x42,
	0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x40, 0x0a, 0x0e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0d,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x30, 0x0a,
	0x11, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x1a,
	0xd4, 0x01, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66,
	0x65, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x4b, 0x41, 0x46, 0x4b, 0x41, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x4d, 0x41, 0x58, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x04, 0x42, 0x09, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x7b, 0x0a, 0x1e, 0x64, 0x65, 0x76, 0x2e,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x64,
	0x65, 0x76, 0x2f, 0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x61, 0x72, 0x61, 0x6d, 0x6c, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x61, 0x73, 0x74,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feast_core_DataSource_proto_rawDescOnce sync.Once
	file_feast_core_DataSource_proto_rawDescData = file_feast_core_DataSource_proto_rawDesc
)

func file_feast_core_DataSource_proto_rawDescGZIP() []byte {
	file_feast_core_DataSource_proto_rawDescOnce.Do(func() {
		file_feast_core_DataSource_proto_rawDescData = protoimpl.X.CompressGZIP(file_feast_core_DataSource_proto_rawDescData)
	})
	return file_feast_core_DataSource_proto_rawDescData
}

var file_feast_core_DataSource_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_feast_core_DataSource_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_feast_core_DataSource_proto_goTypes = []interface{}{
	(DataSource_SourceType)(0),           // 0: feast.core.DataSource.SourceType
	(*DataSource)(nil),                   // 1: feast.core.DataSource
	nil,                                  // 2: feast.core.DataSource.FieldMappingEntry
	(*DataSource_FileOptions)(nil),       // 3: feast.core.DataSource.FileOptions
	(*DataSource_BigQueryOptions)(nil),   // 4: feast.core.DataSource.BigQueryOptions
	(*DataSource_MaxComputeOptions)(nil), // 5: feast.core.DataSource.MaxComputeOptions
	(*DataSource_KafkaOptions)(nil),      // 6: feast.core.DataSource.KafkaOptions
	(*FileFormat)(nil),                   // 7: feast.core.FileFormat
	(*SparkOverride)(nil),                // 8: feast.core.SparkOverride
	(*StreamFormat)(nil),                 // 9: feast.core.StreamFormat
}
var file_feast_core_DataSource_proto_depIdxs = []int32{
	0,  // 0: feast.core.DataSource.type:type_name -> feast.core.DataSource.SourceType
	2,  // 1: feast.core.DataSource.field_mapping:type_name -> feast.core.DataSource.FieldMappingEntry
	3,  // 2: feast.core.DataSource.file_options:type_name -> feast.core.DataSource.FileOptions
	4,  // 3: feast.core.DataSource.bigquery_options:type_name -> feast.core.DataSource.BigQueryOptions
	6,  // 4: feast.core.DataSource.kafka_options:type_name -> feast.core.DataSource.KafkaOptions
	5,  // 5: feast.core.DataSource.maxcompute_options:type_name -> feast.core.DataSource.MaxComputeOptions
	7,  // 6: feast.core.DataSource.FileOptions.file_format:type_name -> feast.core.FileFormat
	8,  // 7: feast.core.DataSource.FileOptions.spark_override:type_name -> feast.core.SparkOverride
	8,  // 8: feast.core.DataSource.BigQueryOptions.spark_override:type_name -> feast.core.SparkOverride
	9,  // 9: feast.core.DataSource.KafkaOptions.message_format:type_name -> feast.core.StreamFormat
	8,  // 10: feast.core.DataSource.KafkaOptions.spark_override:type_name -> feast.core.SparkOverride
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_feast_core_DataSource_proto_init() }
func file_feast_core_DataSource_proto_init() {
	if File_feast_core_DataSource_proto != nil {
		return
	}
	file_feast_core_DataFormat_proto_init()
	file_feast_core_SparkOverride_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feast_core_DataSource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_FileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_BigQueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_MaxComputeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feast_core_DataSource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSource_KafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feast_core_DataSource_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DataSource_FileOptions_)(nil),
		(*DataSource_BigqueryOptions)(nil),
		(*DataSource_KafkaOptions_)(nil),
		(*DataSource_MaxcomputeOptions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feast_core_DataSource_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feast_core_DataSource_proto_goTypes,
		DependencyIndexes: file_feast_core_DataSource_proto_depIdxs,
		EnumInfos:         file_feast_core_DataSource_proto_enumTypes,
		MessageInfos:      file_feast_core_DataSource_proto_msgTypes,
	}.Build()
	File_feast_core_DataSource_proto = out.File
	file_feast_core_DataSource_proto_rawDesc = nil
	file_feast_core_DataSource_proto_goTypes = nil
	file_feast_core_DataSource_proto_depIdxs = nil
}
